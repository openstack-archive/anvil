#!/usr/bin/python

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Parts Copyright 2007 Red Hat, Inc

import warnings
warnings.filterwarnings("ignore")

from optparse import OptionParser

import json
import os
import pkg_resources
import sys

from yum import YumBase


def find_matches(base, pkg_name, py_req):
    pkgs = base.doPackageLists(patterns=[pkg_name], ignore_case=True,
                               showdups=True)
    all_pkgs = list(pkgs.available)
    all_pkgs.extend(pkgs.installed)

    yum_map = {}
    for pkg in all_pkgs:
        for provides in pkg.provides:
            pkg_info = (pkg.version, pkg)
            yum_map.setdefault(provides[0], set()).add(pkg_info)

    matches = []
    yum_versions = yum_map.get(pkg_name, [])
    for (version, pkg) in yum_versions:
        if version in py_req:
            matches.append(pkg)
    return matches


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-p", dest="packages", action="append",
                      help="rpm-name,python-requirement to attempt to match",
                      metavar="RPM-REQ")
    parser.add_option("-j", '--json', dest="is_json", action="store_true",
                      default=False,
                      help="output the package details in json"
                           " (which is easier to parse)")
    (options, args) = parser.parse_args()
    if not options.packages:
        parser.error("Option 'packages' is required")
    examine_what = []
    for p in options.packages:
        try:
            (rpm_name, python_req) = p.split(",", 1)
            rpm_name = rpm_name.strip()
            python_req = python_req.strip()
            if not python_req:
                python_req = rpm_name
            examine_what.append((rpm_name, python_req))
        except ValueError:
            p = p.strip()
            examine_what.append((p, p))
    base = YumBase()
    base.doConfigSetup(debuglevel=-1, errorlevel=-1)
    for (pkg_name, py_name) in examine_what:
        matches = find_matches(base, pkg_name,
                               pkg_resources.Requirement.parse(py_name))
        if matches:
            # Pick the newest match.
            pkg = sorted(matches)[-1]
            if options.is_json:
                print(json.dumps({
                    'arch': pkg.arch,
                    'epoch': pkg.epoch,
                    'name': pkg.name,
                    'release': pkg.release,
                    'version': pkg.version,
                }))
            else:
                print(pkg)
        else:
            # Nothing found.
            print("")
