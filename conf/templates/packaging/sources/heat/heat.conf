[DEFAULT]

# Print more verbose output (set logging level to INFO instead
# of default WARNING level). (boolean value)
verbose = True

# Select deferred auth method, stored password or trusts
# (string value)
deferred_auth_method = password

# URL of the Heat metadata server (string value)
heat_metadata_server_url = http://localhost:8000

# the RabbitMQ password (string value)
rabbit_password = guest

# Maximum depth allowed when using nested stacks. (integer
# value)
max_nested_stack_depth = 3

# Seconds between running periodic tasks (integer value)
periodic_interval = 60

# The RabbitMQ broker address where a single node is used
# (string value)
rabbit_host = localhost

# Maximum resources allowed per top-level stack. (integer
# value)
max_resources_per_stack = 1000

# Driver to use for controlling instances (string value)
instance_driver = heat.engine.nova

# the RabbitMQ userid (string value)
rabbit_userid = guest

# Controls how many events will be pruned whenever a  stack's
# events exceed max_events_per_stack. Set this lower to keep
# more events at the expense of more frequent purges. (integer
# value)
event_purge_batch_size = 10

# The default user for new instances (string value)
instance_user = ec2-user

# The SQLAlchemy connection string used to connect to the
# database (string value)
sql_connection = mysql://heat:heat@localhost:3306/heat?charset=utf8

# Subset of trustor roles to be delegated to heat (list value
trusts_delegated_roles = heat_stack_owner

# Maximum raw byte size of any template. (integer value)
max_template_size = 524288

# The RabbitMQ broker port where a single node is used
# (integer value)
rabbit_port = 5672

# Name of the engine node. This can be an opaque identifier.It
# is not necessarily a hostname, FQDN, or IP address. (string
# value)
host = localhost

# List of directories to search for Plugins (list value)
plugin_dirs = /usr/lib64/heat,/usr/lib/heat

# The directory to search for environment files (string value)
environment_dir = /etc/heat/environment.d

# Keystone role for heat template-defined users (string value)
heat_stack_user_role = heat_stack_user

# Controls how many events will be pruned whenever a  stack's
# events exceed max_events_per_stack. Set this lower to keep
# more events at the expense of more frequent purges. (integer
# value)
max_events_per_stack = 1000

# The backend to use for db (string value)
db_backend = heat.db.sqlalchemy.api

# URL of the Heat cloudwatch server (string value)
heat_watch_server_url = http://localhost:8003

# Timeout before idle sql connections are reaped (integer
# value)
sql_idle_timeout = 3600

# URL of the Heat waitcondition server (string value)
heat_waitcondition_server_url = http://localhost:8000/v1/waitcondition

# Print debugging output (set logging level to DEBUG instead
# of default WARNING level). (boolean value)
debug = True

# Maximum number of stacks any one tenant may have active at
# one time. (integer value)
max_stacks_per_tenant = 100

[paste_deploy]

# The API paste config file to use (string value)
api_paste_config = heat-api-paste.ini

[heat_api_cfn]

# The port on which the server will listen. (integer value)
bind_port = 8000

# Number of backlog requests to configure the socket with
# (integer value)
backlog = 4096

# Address to bind the server.  Useful when selecting a
# particular network interface. (string value)
bind_host = 0.0.0.0

[keystone_authtoken]

# Keystone account username (string value)
admin_user = heat

# The name of the admin tenant (string value)
admin_tenant_name = services

# The keystone port (integer value)
auth_port = 35357

# Protocol to be used for auth requests http/https (string value)
auth_protocol = http

# Authentication Endpoint URI (string value)
auth_uri = http://localhost:5000/v2.0/

# Keystone account password (string value)
admin_password = heat

# Host providing the admin Identity API endpoint (string
# value)
auth_host = localhost

[auth_password]

# Allow orchestration of multiple clouds (boolean value)
multi_cloud = false
